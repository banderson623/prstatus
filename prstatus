#!/usr/bin/env bash

## Enter any options you would like to avoid having
## to re-enter in the command line every time
token=""
repo=""


#####################################
### DO NOT EDIT BEYOND THIS POINT ###
#####################################

## FORMATTING
_bold=$(tput bold) 
_reset=$(tput sgr0)


## Argument validation
arg_check()
{
  if [ -z "$token" ]; then
    echo -e "${_bold}ERROR: OAuth token not specified (required)${_reset}\n"
    show_help
    exit
  fi

  if [ -z "$repo" ]; then
    echo -e "${_bold}ERROR: Repository not specified (required)${_reset}\n"
    show_help
    exit
  fi

  if [ -z "$prid" ]; then
    endpoint="repos$target/$repo/pulls"
  else
    endpoint="repos$target/$repo/pulls/$prid"
  fi
  
  }


## USAGE HELP
show_help() 
{
  cat << EOF
Usage: $0 [-dh] [-t TOKEN] [-r REPO]...
Options:
    -h | --help                 display this syntax information and exit
    -d | --debug                display API request details and exit
    -t | --token TOKEN          OAuth token ${_bold}(required)${_reset}
                                  More info: http://git.io/vmNUX
                                  Example:  $0 -t e72e16c7e42f292c6912e7710c8
    -r | --repo USER/REPO       Target repository ${_bold}(required)${_reset}
                                  Note: specify repo\'s owner username OR organization
                                  Example:  $0 -r reddit/reddit
                                            $0 -r levifig/prstatus
    -p | --pullrequest ID       Specify unique pull request by its ID
                                  Example:  $0 -p 1449
EOF
}


## DEBUG
debug() 
{
  arg_check
  # DEBUG: show parsed arguments and exit
  # TODO: show "nil" for empty arguments
  echo " ===== Repo set to: $repo"
  echo " ===== PR set to: $prid"
  echo " ===== API endpoint set to: $endpoint"
  echo " ===== Auth token set to: $token"
  exit
}


## API REQUEST
api_request() 
{
  arg_check
  curl -s \
    -G "https://api.github.com/$endpoint?$params" \
    -H "Authorization: token $token"
}


## RELATIVE TIME CONVERTER
relative_time()
{
  dt=`date -d "$1" +%Y%m%d`
  echo $(( ( $(date +%s) - $(date -d "$dt" +%s) ) /(24 * 60 * 60 ) ))
}


show_details()
{
  echo "SPECIFIC PR DETAIL"

  local keys=(
    title number created_at updated_at closed_at merged_at html_url
    merged mergeable mergeable_state merged_by comments review_comments
    commits additions deletions changed_files
  )

  local author=$(echo $pr_details | jq -rc .user.login)
  for key in ${keys[@]}; do
    local ${key}="$( echo $pr_details | jq -rc .$key)"
  done
  
  echo $title
}


## SHOW SUMMARY OF OPEN PRs
show_summary()
{
  echo -e "Fetching information..."
  echo -e "Please wait..."
  prs=$(echo $(api_request))
  
  local pr_id=($( echo $prs | jq -rc '.[] | .number' ))
  local created_at=($( echo $prs | jq -rc '.[] | .created_at' ))
  local updated_at=($( echo $prs | jq -rc '.[] | .updated_at' ))
  local repo_base=($( echo $prs | jq -rc '.[] | .base.label' ))
  local pr_link=($( echo $prs | jq -rc '.[] | .html_url' ))
  local username=($( echo $prs | jq -rc '.[] | .user.login' ))
  
  ## Workaround to handle spaces
  local title=(); mapfile -t title <<< "$( echo $prs | jq -rc '.[] | .title' )"   

  for id in ${!pr_id[*]}; do
    echo -e "\n#${pr_id[$id]}\t\"${title[$id]}\" [${repo_base[$id]}] (${pr_link[$id]})"
    echo -e "\tSubmitted by ${_bold}${username[$id]}${_reset} $(relative_time ${created_at[$id]}) days ago (last updated $(relative_time ${updated_at[$id]}) days ago)."
  done
}


main() 
{ 
  if [ -z "$prid" ]; then
    show_summary 
  else
    show_details
  fi
}


## ARGUMENT PARSING
while :; do
  case $1 in
    -r | --repo )
      repo="$2"
      shift
      ;;
    -p | --pullrequest )
      prid="$2"
      shift
      ;;
    -t | --token )
      token="$2"
      shift
      ;;
    -d | --debug )
      debug
      shift
      ;;
    -h |--help | -\? )
      show_help
      exit
      ;;
    * )
      # No more arguments to parse
      main
      break
  esac
  shift
done
